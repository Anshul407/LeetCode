class Solution {
public:
    vector<int>parent,size;
    void abc(int n){
        parent.resize(n+1);
        size.resize(n+1,1);
        for(int i=0;i<=n;i++)parent[i]=i;
    }
    int findp(int node){
        if(node==parent[node])return node;
        return parent[node]=findp(parent[node]);
    }
    void unionbysize(int u,int v){
        int pu=findp(u);
        int pv=findp(v);
        if(pu==pv)return ;

        if(size[pu]>size[pv]){
            parent[pv]=pu;
            size[pu]+=size[pv];
        }else{
            parent[pu]=pv;
            size[pv]+=size[pu];
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initials) {
        abc(graph.size());
        int ans=-1,s=-1;
        for(int i=0;i<graph.size();i++){
            for(int j=0;j<graph[0].size();j++)
            if(graph[i][j]==1&&i!=j)unionbysize(i,j);
        }
        sort(initials.begin(),initials.end());
        map<int,int>mp;
        for(auto i:initials){
            auto p=findp(i);
            mp[p]++;
        }
        for(auto i:initials){
            int p=findp(i);
            if(mp[p]==1&&s<size[p]){
                    s=size[findp(i)];
                    ans=i;
                
            }
        }
        return ans==-1?initials[0]:ans;

    }
};